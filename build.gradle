// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
}

apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'
apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = config.mod.version
group = config.mod.group
archivesBaseName = config.mod.name

def getGitRef() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Throwable e) {
        return "unknown"
    }
}

if (System.getenv("PROMOTED_NUMBER") != null)
    version += ".${System.getenv("PROMOTED_NUMBER")}"
else if (System.getenv("BUILD_NUMBER") != null)
    version += ".${System.getenv("BUILD_NUMBER")}"
else
    version += "+" + getGitRef()

ext.simpleVersion = version
version = "MC${config.minecraft.version}-${project.version}"

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "run"

    mappings = config.minecraft.mappings

    replace "@VERSION@", project.simpleVersion
    replace "/*@MCVERSIONDEP@*/", ", acceptedMinecraftVersions = \"[${config.minecraft.version}]\""
}

repositories {
    maven { url "https://maven.cil.li/" }
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    maven { url "http://artifactory.terasology.org/artifactory/virtual-repo-live" }
    maven { url 'https://squiddev.cc/maven/' }
    ivy { artifactPattern "http://asie.pl/javadeps/[module]-[revision](-[classifier]).[ext]" }
}

configurations {
    shadow
    compile.extendsFrom provided, shadow
}

dependencies {
    // shadow "org.terasology.jnlua:JNLua:0.1.0-SNAPSHOT"
    shadow name: 'jnlua-staging', version: '20191006'
    shadow name: 'luaj-jse', version: '11b29f92'

    deobfCompile ("li.cil.tis3d:TIS-3D:MC1.12-${config.tis3d.version}") {
        exclude module: "jei_1.12"
    }
    deobfCompile "com.mod-buildcraft:buildcraft-api:${config.buildcraft.version}"
    deobfCompile "MCMultiPart2:MCMultiPart-exp:${config.mcmp.version}"
    provided ("net.sengir.forestry:forestry_1.12.2:${config.forestry.version}") {
        exclude module: "jei_1.12"
    }
    deobfCompile "net.industrial-craft:industrialcraft-2:${config.ic2.version}"
    deobfCompile "mcp.mobius.waila:Hwyla:${config.hwyla.version}:api"
    deobfCompile "org.squiddev:cc-tweaked-1.12.2:${config.cc.version}" // official CC conflicts with LuaJ 3.x
    deobfCompile "charset:Charset:${config.charset.version}:api"
    
    provided ("appeng:appliedenergistics2:${config.ae2.version}:api") {
        transitive = false
    }
    provided "extracells2:ExtraCells-api:${config.extracells.version}"
    
    provided("mekanism:Mekanism:${config.mekanism.version}:api") {
        transitive = false
    }

    provided ("codechicken:ForgeMultipart:${config.minecraft.version}-${config.forgemultipart.version}:universal") {
        exclude module: "jei_1.12"
        exclude module: "CodeChickenLib"
    }

    provided ("codechicken:ChickenASM:${config.casm.version}")

    provided "mezz.jei:jei_${config.minecraft.version}:${config.jei.version}"
    provided "codechicken:CodeChickenLib:${config.minecraft.version}-${config.ccl.version}:universal"
    provided "codechicken:WR-CBE:${config.minecraft.version}-${config.wrcbe.version}:universal"

    provided ("mrtjp:ProjectRed:${config.projred.version}:Base") {
        exclude module: "NotEnoughItems"
        exclude module: "CodeChickenLib"
        exclude module: "jei_1.12"
        exclude module: "ForgeMultipart"
    }

    provided ("mrtjp:ProjectRed:${config.projred.version}:integration") {
        exclude module: "NotEnoughItems"
        exclude module: "CodeChickenLib"
        exclude module: "jei_1.12"
        exclude module: "ForgeMultipart"
    }

    testCompile "org.mockito:mockito-all:1.10.19"

    provided "codechicken:EnderStorage:${config.minecraft.version}-${config.enderstorage.version}:universal"
}

processResources {
    inputs.property "version", project.simpleVersion
    inputs.property "mcversion", project.minecraft.version
    inputs.property "fversion", config.forge.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.simpleVersion, 'mcversion':project.minecraft.version, 'fversion':config.forge.version
    }
    from(sourceSets.main.resources.srcDirs) {
        include 'application.conf'
        filter { line ->
            line.replaceAll("@VERSION@", project.simpleVersion)
        }
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'application.conf'
    }

    // Move access transformer to META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

allprojects {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

jar.dependsOn shadowJar
jar.enabled = false

jar {
    manifest {
        attributes FMLCorePlugin: "li.cil.oc.common.launch.TransformerLoader"
        attributes FMLCorePluginContainsFMLMod: "true"
        attributes FMLAT: "oc_at.cfg"
    }
}

shadowJar {
    archiveName = tasks.jar.archiveName
    configurations = [project.configurations.shadow]
    relocate 'org.luaj.vm2', 'li.cil.oc.repack.org.luaj.vm2'
}

reobfJar {
    setJar(tasks.shadowJar.archivePath)
}

reobfJar.dependsOn shadowJar

javadoc {
    include 'li/cil/oc/api/**'
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    classifier = 'api'
    include 'li/cil/oc/api/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
}

artifacts {
    archives apiJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact apiJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url System.getenv("MAVEN_PATH")
        }
    }
}

curseforge {
    apiKey = project.hasProperty("curseForgeApiKey") ? project.curseForgeApiKey : ""
    project {
        id = config.curse.project.id
        releaseType = config.curse.project.releaseType
        changelogType = "markdown"
        changelog = file("changelog.md")
        addGameVersion config.minecraft.version
        addGameVersion "Java 8"
    }
}
